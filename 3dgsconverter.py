import argparse
import numpy as np
from plyfile import PlyData, PlyElement
from tqdm import tqdm

# Define constant headers for gs3d and cc formats
# (Headers are automatically generated by the plyfile library, so we don't need them here)

def text_based_detect_format(file_path):
    """Detect if the given file is in 'gs3d' or 'cc' format."""
    with open(file_path, 'rb') as file:
        header_bytes = file.read(2048)  # Read the beginning to detect the format

    header = header_bytes.decode('utf-8', errors='ignore')
    if "property float f_dc_0" in header:
        return "gs3d"
    elif "property float scal_f_dc_0" in header:
        return "cc"
    else:
        return None

def create_new_ply_with_header(input_path, output_path, detected_format):
    """Create a new PLY file with the opposite header of the detected format and binary data from the original."""
    plydata = PlyData.read(input_path)
    vertices = plydata['vertex'].data

    chunk_size = 10000  # Number of vertices to process in each chunk

    all_processed_data = []

    for start_idx in tqdm(range(0, len(vertices), chunk_size), desc="Processing"):
        end_idx = start_idx + chunk_size
        chunk = vertices[start_idx:end_idx]

        colors = []
        for vertex in chunk:
            f_dc = np.array([vertex['f_dc_0'], vertex['f_dc_1'], vertex['f_dc_2']])
            color = (f_dc + 1) * 127.5
            color = np.clip(color, 0, 255).astype(np.uint8)
            colors.append(color)
        colors = np.array(colors)

        # Extracting existing data
        x = vertices['x']
        y = vertices['y']
        z = vertices['z']
        nx = vertices['nx']
        ny = vertices['ny']
        nz = vertices['nz']
        f_dc_0 = vertices['f_dc_0']
        f_dc_1 = vertices['f_dc_1']
        f_dc_2 = vertices['f_dc_2']
        f_rest = [vertices[f'f_rest_{i}'] for i in range(45)]
        opacity = vertices['opacity']
        scale_0 = vertices['scale_0']
        scale_1 = vertices['scale_1']
        scale_2 = vertices['scale_2']
        rot_0 = vertices['rot_0']
        rot_1 = vertices['rot_1']
        rot_2 = vertices['rot_2']
        rot_3 = vertices['rot_3']
        
        r = colors[:, 0]
        g = colors[:, 1]
        b = colors[:, 2]

        # Creating the new PLY
        chunk_data = np.array(list(zip(x, y, z, nx, ny, nz, 
                                    f_dc_0, f_dc_1, f_dc_2, 
                                    *f_rest, 
                                    opacity, 
                                    scale_0, scale_1, scale_2, 
                                    rot_0, rot_1, rot_2, rot_3, 
                                    r, g, b)),
                        dtype=[('x', 'f4'), ('y', 'f4'), ('z', 'f4'), 
                                ('nx', 'f4'), ('ny', 'f4'), ('nz', 'f4'), 
                                ('scal_f_dc_0', 'f4'), ('scal_f_dc_1', 'f4'), ('scal_f_dc_2', 'f4'), 
                                *[(f'scal_f_rest_{i}', 'f4') for i in range(45)], 
                                ('scal_opacity', 'f4'), 
                                ('scal_scale_0', 'f4'), ('scal_scale_1', 'f4'), ('scal_scale_2', 'f4'), 
                                ('scal_rot_0', 'f4'), ('scal_rot_1', 'f4'), ('scal_rot_2', 'f4'), ('scal_rot_3', 'f4'), 
                                ('red', 'u1'), ('green', 'u1'), ('blue', 'u1')])
        
        all_processed_data.append(chunk_data)

    # Concatenate all processed chunks together
    final_data = np.concatenate(all_processed_data)

    new_plydata = PlyData([PlyElement.describe(final_data, 'vertex')], byte_order='=')
    new_plydata.write(output_path)

def main():
    parser = argparse.ArgumentParser(description="Detect point cloud format: standard 3d gaussian splat or 3d gaussian splat for cloud compare and create a new file with the opposite header.")
    parser.add_argument("input_file", help="Path to the point cloud file.")
    parser.add_argument("output_file", help="Path to save the new point cloud file with the opposite header.")
    args = parser.parse_args()
    
    format_display_names = {
        "gs3d": "standard 3D Gaussian Splat",
        "cc": "3d Gaussian Splat for Cloud Compare"
    }

    detected_format = text_based_detect_format(args.input_file)
    
    if detected_format:
        print(f"Detected format of input file: {format_display_names[detected_format]}")
        create_new_ply_with_header(args.input_file, args.output_file, detected_format)
        print(f"Created new PLY file: {args.output_file}")
    else:
        print("The provided file is not a recognized 3d gaussian splat point cloud format.")

if __name__ == "__main__":
    main()
